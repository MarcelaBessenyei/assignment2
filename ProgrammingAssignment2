## This function creates a matrix that can cache its inverse
## Sets the value of a matrix
## Gets the value of the matrix
## Sets the value of inverse of the matrix via solve()
## Gets the vale of inverse of the matrix

makeCacheMatrix <- function(x=matrix()) {
   m<- NULL
   set <- function (y) {
      x<<-y
      m<<-NULL
}
get<-function()x
setmatrix <- function(solve) m<<-solve
getmatrix<-function()m
list(set=set, get=get,
      setmatrix=setmatrix,
      getmatrix=getmatrix)
}

## This function returns a matrix that is the inverse of x
## First checks to see if the inverse of the matrix has been calculated
## If so, it gets the mean from the cache and skips the computation 
## If not available, it computes the inverse
## Sets the value in the cache via setmatrix

cacheSolve <- function(x, ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix <-x$get ()
m<- solve(matrix)
x$setmatrix(m)
m
}
